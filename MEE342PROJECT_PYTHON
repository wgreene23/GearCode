import numpy as np
# Spur Gear Design Project
# MEE 342 - Principals of Mechanical Engineering Design
# Professor Yi Ren
% Diego Torres, Matteo Orlando, Tyler Rokop, William Greene

# Purpose 
# The purpose of this code is to build a code capable of designing a spur
# gear with given parameters

# Design Decisions
# Diametral Pitch and Face width
P_d = float(input("Diametral Pitch (teeth/inch):"))  # Diametral Pitch
F = float(input("Face Width (inches):"))  # Face Width

# Pinion Material
nu_p = float(input("Poisson's ratio of pinion:"))  # Poisson's ratio of pinion
E_p = float(input("Elastic Modulus of pinion (ksi):"))  # Elastic Modulus of pinion
density_p = float(input("Density of pinion material (lb/ft^3):"))  # density of pinion

# Gear Material
nu_g = float(input("Poisson's ratio of gear:"))  # Poisson's ratio of gear
E_g = float(input("Elastic Modulus of gear (ksi):"))  # Elastic Modulus of gear
density_g = float(input("Density of gear material (lb/ft^3):"))  # density of gear

# Function
H = float(input("Load (rev/min):"))  # Load
hp = float(input("Horsepower (hp):"))  # Horsepower
R = float(input("Reliability:"))  # Reliability
K_o = float(input("Overload Factor (obtain from table of overload factors):"))  # Overload Factor 

# Unquantifiable Risk
n_d = float(input("Design Factor:"))  # Design Factor

# Tooth System
phi_n = float(input("Normal Pressure Angle (in degrees):"))  # Normal Pressure Angle
N_p = int(input("Number of teeth on pinion:"))  # Number of teeth on pinion
N_g = int(input("Number of teeth on gear:"))  # Number of teeth on gear

adn = 1/P_d  # addendum
dedn = 1.25/P_d  # dedendum

rf = float(input("Root fillet radius (in inches):"))  # root fillet radius

# Quality Number
Q_v = int(input("Quality Number (from 1 to 6):"))  # Quality Number

# Pinion Dimensions
d_p = N_p/P_d  # inches
d_ref_p = (P_d * N_p)/12  # ref circle diameter converted to feet
Vol_p = (np.pi/4) * (d_ref_p**2) * F  # used for finding weight

# Gear Dimensions
d_g = N_g/P_d  # inches
d_ref_g = (P_d * N_g)/12  # ref circle diameter converted to feet
Vol_g = (np.pi/4) * (d_ref_g**2) * F  # used for finding weight

# Various Factors for Calculations:

# Dynamic Factor Pinion
V_t = (np.pi/12)*(d_p*N_p)  # Pitch Line Velocity
B = 0.25*(12-Q_v)**(2/3)
A = 50+56*(1-B)
K_v = ((A+(V_t)**(1/2))/A)**(B)  # Dynamic Factor

# Transmitted Load
W_t = H/V_t

# Size Factor
t = 1.2*(adn+dedn)  # assuming m_b to be 1.2
l = (adn + dedn)  # height of tooth

import numpy as np

LewisFormFactorMatrix = np.array([[12, 0.245], [13, 0.261], [14, 0.277], [15, 0.29], [16, 0.296], [17, 0.303], 
                                  [18, 0.309], [19, 0.314], [20, 0.322], [21, 0.328], [22, 0.331], [24, 0.337], 
                                  [26, 0.346], [28, 0.353], [30, 0.359], [34, 0.371], [38, 0.384], [43, 0.397], 
                                  [50, 0.409], [60, 0.422], [75, 0.435], [100, 0.447], [150, 0.46], [300, 0.472], 
                                  [400, 0.480]])

# Statements for Pinion Lewis Form Factor:
if N_p == 12:
    Y_p = LewisFormFactorMatrix[0,1]
elif N_p == 13:
    Y_p = LewisFormFactorMatrix[1,1]
elif N_p == 14:
    Y_p = LewisFormFactorMatrix[2,1]
elif N_p == 15:
    Y_p = LewisFormFactorMatrix[3,1]
elif N_p == 16:
    Y_p = LewisFormFactorMatrix[4,1]
elif N_p == 17:
    Y_p = LewisFormFactorMatrix[5,1]
elif N_p == 18:
    Y_p = LewisFormFactorMatrix[6,1]
elif N_p == 19:
    Y_p = LewisFormFactorMatrix[7,1]
elif N_p == 20:
    Y_p = LewisFormFactorMatrix[8,1]
elif N_p == 21:
    Y_p = LewisFormFactorMatrix[9,1]
elif N_p == 22:
    Y_p = LewisFormFactorMatrix[10,1]
elif N_p == 24:
    Y_p = LewisFormFactorMatrix[11,1]
elif N_p == 26:
    Y_p = LewisFormFactorMatrix[12,1]
elif N_p == 28:
    Y_p = LewisFormFactorMatrix[13,1]
elif N_p == 30:
    Y_p = LewisFormFactorMatrix[14,1]
elif N_p == 34:
    Y_p = LewisFormFactorMatrix[15,1]
elif N_p == 38:
    Y_p = LewisFormFactorMatrix[16,1]
elif N_p == 43:
    Y_p = LewisFormFactorMatrix[17,1]
elif N_p == 50:
    Y_p = LewisFormFactorMatrix[18,1]
elif N_p == 60:
    Y_p = LewisFormFactorMatrix[19,1]
elif N_p == 75:
    Y_p = LewisFormFactorMatrix[20,1]
elif N_p == 100:
    Y_p = LewisFormFactorMatrix[21,1]
elif N_p == 150:
    Y_p = LewisFormFactorMatrix[22,1]
elif N_p == 300:
    Y_p = LewisFormFactorMatrix[23,1]
elif N_p == 400:
    Y_p = LewisFormFactorMatrix[24,1]
else:
    raise ValueError('invalid selection')

# Statements for Gear Lewis Form Factor:
if N_g == 12:
    Y_g = LewisFormFactorMatrix[0,1]
elif N_g == 13:
    Y_g = LewisFormFactorMatrix[1,1]
elif N_g == 14:
    Y_g = LewisFormFactorMatrix[2,1]
elif N_g == 15:
    Y_g = LewisFormFactorMatrix[3,1]
elif N_g == 16:
    Y_g = LewisFormFactorMatrix[4,1]
elif N_g == 17:
    Y_g = LewisFormFactorMatrix[5,1]
elif N_g == 18:
    Y_g = LewisFormFactorMatrix[6,1]
elif N_g == 19:
    Y_g = LewisFormFactorMatrix[7,1]
elif N_g == 20:
    Y_g = LewisFormFactorMatrix[8,1]
elif N_g == 21:
    Y_g = LewisFormFactorMatrix[9,1]
elif N_g == 22:
    Y_g = LewisFormFactorMatrix[10,1]
elif N_g == 24:
    Y_g = LewisFormFactorMatrix[11,1]
elif N_g == 26:
    Y_g = LewisFormFactorMatrix[12,1]
elif N_g == 28:
    Y_g = LewisFormFactorMatrix[13,1]
elif N_g == 30:
    Y_g = LewisFormFactorMatrix[14,1]
elif N_g == 34:
    Y_g = LewisFormFactorMatrix[15,1]
elif N_g == 38:
    Y_g = LewisFormFactorMatrix[16,1]
elif N_g == 43:
    Y_g = LewisFormFactorMatrix[17,1]
elif N_g == 50:
    Y_g = LewisFormFactorMatrix[18,1]
elif N_g == 60:
    Y_g = LewisFormFactorMatrix[19,1]
elif N_g == 75:
    Y_g = LewisFormFactorMatrix[20,1]
elif N_g == 100:
    Y_g = LewisFormFactorMatrix[21,1]
elif N_g == 150:
    Y_g = LewisFormFactorMatrix[22,1]
elif N_g == 300:
    Y_g = LewisFormFactorMatrix[23,1]
elif N_g == 400:
    Y_g = LewisFormFactorMatrix[24,1]
else:
    raise ValueError('invalid selection')

# Size factor for pinion
K_sp = 1.192 * ((F / d_p) * (Y_p)**(1/2))**(0.0535)

# Size factor for gear
K_sg = 1.192 * ((F / d_p) * (Y_g)**(1/2))**(0.0535)

# Load Distribution Factor
C_mc = float(input("1.0 (uncrowned) or 0.8 (crowned):"))

# Pinion Proportion Factor
if F <= 1:
    C_pf = ((F / (10 * d_p)) - 0.025)
elif 1 < F <= 17:
    C_pf = ((F / (10 * d_p)) - 0.0375 + 0.0125 * F)
elif 17 < F <= 40:
    C_pf = ((F / (10 * d_p)) - 0.1109 + 0.0207 * F - 0.000228 * (F)**(2))

# Pinion Proportion Modifier
s_1 = float(input("distance between gear and midway:"))
s = float(input("total distance between centerline of bearing:"))
if (s_1 / s) < 0.175:
    C_pm = 1
elif (s_1 / s) >= 0.175:
    C_pm = 1.1

# C_e
C_e = float(input("Enter 0.8 (gearing adjusted at assembly) or 1.0 (for all other conditions):"))

# C_ma Commercial Condition
C_ma = 0.127 + 0.0158 * F - (0.93 * (10)**(-4)) * F**(2)

# Load distribution factor calculation
K_m = 1 + (C_mc) * ((C_pf * C_pm) + (C_ma * C_e))

# Rim thickness factor
m_b = t / (adn + dedn)
if m_b < 1.2:
    K_b = 1.6 * (math.log(2.242 / m_b))
elif m_b >= 1.2:
    K_b = 1

# Geometry Factor for Bending Stress
J_p = float(input("Geometry factor J for the pinion:"))
J_g = float(input("Geometry factor J for the gear:"))
